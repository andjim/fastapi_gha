name: 06 - Image Build with CVE Scanning non-blocking

on:
  push:
    branches: [master]
  pull_request:
    # I could also choose which branch PR triggers

jobs:
  build-image:
    name: Build Image
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      security-events: write
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      # This action allows to build images using QEMU to emulate other architecture and build images for the chosen architecture
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Docker Build and export image for scanning  
        uses: docker/build-push-action@v6
        with:
          push: false
          load: true # Load the image into the local Docker daemon for scanning
          tags: ${{ github.run_id }}
          target: test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Scan image for vulnerabilities (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          format: 'table'
          exit-code: '0' # Set to '1' to fail the build on vulnerabilities
      
      - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          format: 'sarif'
          exit-code: '1' 
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true # Ignore unfixed vulnerabilities
          vuln-type: 'os,library' # Scan both OS and library vulnerabilities
          output: trivy-results.sarif # Output file for the results
      
      - name: Upload Trivy scan results to github security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() # Always run this step to upload the results
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Add Metadata
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: andjim/docker-ci-automation
          tags: |
            type=raw,value=06
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=ref,event=pr
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Docker Build and Push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64,linux/arm/v7 # With Qemu Action previously set, we now have available the param "platforms" where you can
      
      - name: Find comment for image tags
        uses: peter-evans/find-comment@v3
        if: ${{ github.event_name == 'pull_request' }}
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'The image has been built successfully with the following tags:'

      - name: Create or update comment for image tags
        uses: peter-evans/create-or-update-comment@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            The image has been built successfully with the following tags:
            - ${{ steps.docker_meta.outputs.tags }}
            - Labels: ${{ steps.docker_meta.outputs.labels }}
          edit-mode: replace